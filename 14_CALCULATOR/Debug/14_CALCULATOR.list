
14_CALCULATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002490  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800259c  0800259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002610  08002610  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002610  08002610  00003610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002618  08002618  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002618  08002618  00003618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800261c  0800261c  0000361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002620  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800262c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800262c  0000402c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e94  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001055  00000000  00000000  00006ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00007f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000300  00000000  00000000  00008350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167b3  00000000  00000000  00008650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d72  00000000  00000000  0001ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fc45  00000000  00000000  00024b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a47ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f48  00000000  00000000  000a4800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000a5748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002584 	.word	0x08002584

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002584 	.word	0x08002584

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <DataDir>:
#define E_Rst() 			HAL_GPIO_WritePin(GPIOB, E_Pin, GPIO_PIN_RESET)

/*************************************自定义函数****************************************/
//D0-D7设定方向：I-输入；O-输出
void DataDir(char dir)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b086      	sub	sp, #24
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800016a:	f107 0308 	add.w	r3, r7, #8
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	609a      	str	r2, [r3, #8]
 8000176:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin|D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	21ff      	movs	r1, #255	@ 0xff
 800017c:	480e      	ldr	r0, [pc, #56]	@ (80001b8 <DataDir+0x58>)
 800017e:	f001 fd72 	bl	8001c66 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin|D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000182:	23ff      	movs	r3, #255	@ 0xff
 8000184:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000186:	2301      	movs	r3, #1
 8000188:	613b      	str	r3, [r7, #16]
	if(dir == 'I')
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b49      	cmp	r3, #73	@ 0x49
 800018e:	d102      	bne.n	8000196 <DataDir+0x36>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	e006      	b.n	80001a4 <DataDir+0x44>
	}
	else if(dir == 'O')
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b4f      	cmp	r3, #79	@ 0x4f
 800019a:	d103      	bne.n	80001a4 <DataDir+0x44>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019c:	2301      	movs	r3, #1
 800019e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a0:	2302      	movs	r3, #2
 80001a2:	617b      	str	r3, [r7, #20]
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001a4:	f107 0308 	add.w	r3, r7, #8
 80001a8:	4619      	mov	r1, r3
 80001aa:	4803      	ldr	r0, [pc, #12]	@ (80001b8 <DataDir+0x58>)
 80001ac:	f001 fbc0 	bl	8001930 <HAL_GPIO_Init>
}
 80001b0:	bf00      	nop
 80001b2:	3718      	adds	r7, #24
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40010800 	.word	0x40010800

080001bc <ReadData>:

//D0-D7读数据
uint8_t ReadData()
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
	uint8_t dat=0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	71fb      	strb	r3, [r7, #7]
	//DataDir('I');
	if(HAL_GPIO_ReadPin(GPIOA, D0_Pin)==GPIO_PIN_SET) dat|=0x01;
 80001c6:	2101      	movs	r1, #1
 80001c8:	482d      	ldr	r0, [pc, #180]	@ (8000280 <ReadData+0xc4>)
 80001ca:	f001 fd35 	bl	8001c38 <HAL_GPIO_ReadPin>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d103      	bne.n	80001dc <ReadData+0x20>
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D1_Pin)==GPIO_PIN_SET) dat|=0x02;
 80001dc:	2102      	movs	r1, #2
 80001de:	4828      	ldr	r0, [pc, #160]	@ (8000280 <ReadData+0xc4>)
 80001e0:	f001 fd2a 	bl	8001c38 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d103      	bne.n	80001f2 <ReadData+0x36>
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D2_Pin)==GPIO_PIN_SET) dat|=0x04;
 80001f2:	2104      	movs	r1, #4
 80001f4:	4822      	ldr	r0, [pc, #136]	@ (8000280 <ReadData+0xc4>)
 80001f6:	f001 fd1f 	bl	8001c38 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d103      	bne.n	8000208 <ReadData+0x4c>
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D3_Pin)==GPIO_PIN_SET) dat|=0x08;
 8000208:	2108      	movs	r1, #8
 800020a:	481d      	ldr	r0, [pc, #116]	@ (8000280 <ReadData+0xc4>)
 800020c:	f001 fd14 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b01      	cmp	r3, #1
 8000214:	d103      	bne.n	800021e <ReadData+0x62>
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D4_Pin)==GPIO_PIN_SET) dat|=0x10;
 800021e:	2110      	movs	r1, #16
 8000220:	4817      	ldr	r0, [pc, #92]	@ (8000280 <ReadData+0xc4>)
 8000222:	f001 fd09 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b01      	cmp	r3, #1
 800022a:	d103      	bne.n	8000234 <ReadData+0x78>
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D5_Pin)==GPIO_PIN_SET) dat|=0x20;
 8000234:	2120      	movs	r1, #32
 8000236:	4812      	ldr	r0, [pc, #72]	@ (8000280 <ReadData+0xc4>)
 8000238:	f001 fcfe 	bl	8001c38 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	2b01      	cmp	r3, #1
 8000240:	d103      	bne.n	800024a <ReadData+0x8e>
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f043 0320 	orr.w	r3, r3, #32
 8000248:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D6_Pin)==GPIO_PIN_SET) dat|=0x40;
 800024a:	2140      	movs	r1, #64	@ 0x40
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <ReadData+0xc4>)
 800024e:	f001 fcf3 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b01      	cmp	r3, #1
 8000256:	d103      	bne.n	8000260 <ReadData+0xa4>
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800025e:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, D7_Pin)==GPIO_PIN_SET) dat|=0x80;
 8000260:	2180      	movs	r1, #128	@ 0x80
 8000262:	4807      	ldr	r0, [pc, #28]	@ (8000280 <ReadData+0xc4>)
 8000264:	f001 fce8 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d103      	bne.n	8000276 <ReadData+0xba>
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000274:	71fb      	strb	r3, [r7, #7]
	return dat;
 8000276:	79fb      	ldrb	r3, [r7, #7]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010800 	.word	0x40010800

08000284 <WriteData>:

//D0-D7写数据
void WriteData(uint8_t dat)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	uint16_t Set_Pins = 0, Rst_Pins = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	81fb      	strh	r3, [r7, #14]
 8000292:	2300      	movs	r3, #0
 8000294:	81bb      	strh	r3, [r7, #12]
	//DataDir('O');
	if(dat & 0x01) Set_Pins |= D0_Pin;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d004      	beq.n	80002aa <WriteData+0x26>
 80002a0:	89fb      	ldrh	r3, [r7, #14]
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	81fb      	strh	r3, [r7, #14]
 80002a8:	e003      	b.n	80002b2 <WriteData+0x2e>
	else Rst_Pins |= D0_Pin;
 80002aa:	89bb      	ldrh	r3, [r7, #12]
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x02) Set_Pins |= D1_Pin;
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 0302 	and.w	r3, r3, #2
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d004      	beq.n	80002c6 <WriteData+0x42>
 80002bc:	89fb      	ldrh	r3, [r7, #14]
 80002be:	f043 0302 	orr.w	r3, r3, #2
 80002c2:	81fb      	strh	r3, [r7, #14]
 80002c4:	e003      	b.n	80002ce <WriteData+0x4a>
	else Rst_Pins |= D1_Pin;
 80002c6:	89bb      	ldrh	r3, [r7, #12]
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x04) Set_Pins |= D2_Pin;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d004      	beq.n	80002e2 <WriteData+0x5e>
 80002d8:	89fb      	ldrh	r3, [r7, #14]
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	81fb      	strh	r3, [r7, #14]
 80002e0:	e003      	b.n	80002ea <WriteData+0x66>
	else Rst_Pins |= D2_Pin;
 80002e2:	89bb      	ldrh	r3, [r7, #12]
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x08) Set_Pins |= D3_Pin;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d004      	beq.n	80002fe <WriteData+0x7a>
 80002f4:	89fb      	ldrh	r3, [r7, #14]
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	81fb      	strh	r3, [r7, #14]
 80002fc:	e003      	b.n	8000306 <WriteData+0x82>
	else Rst_Pins |= D3_Pin;
 80002fe:	89bb      	ldrh	r3, [r7, #12]
 8000300:	f043 0308 	orr.w	r3, r3, #8
 8000304:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x10) Set_Pins |= D4_Pin;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	2b00      	cmp	r3, #0
 800030e:	d004      	beq.n	800031a <WriteData+0x96>
 8000310:	89fb      	ldrh	r3, [r7, #14]
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	81fb      	strh	r3, [r7, #14]
 8000318:	e003      	b.n	8000322 <WriteData+0x9e>
	else Rst_Pins |= D4_Pin;
 800031a:	89bb      	ldrh	r3, [r7, #12]
 800031c:	f043 0310 	orr.w	r3, r3, #16
 8000320:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x20) Set_Pins |= D5_Pin;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	2b00      	cmp	r3, #0
 800032a:	d004      	beq.n	8000336 <WriteData+0xb2>
 800032c:	89fb      	ldrh	r3, [r7, #14]
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	81fb      	strh	r3, [r7, #14]
 8000334:	e003      	b.n	800033e <WriteData+0xba>
	else Rst_Pins |= D5_Pin;
 8000336:	89bb      	ldrh	r3, [r7, #12]
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x40) Set_Pins |= D6_Pin;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000344:	2b00      	cmp	r3, #0
 8000346:	d004      	beq.n	8000352 <WriteData+0xce>
 8000348:	89fb      	ldrh	r3, [r7, #14]
 800034a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800034e:	81fb      	strh	r3, [r7, #14]
 8000350:	e003      	b.n	800035a <WriteData+0xd6>
	else Rst_Pins |= D6_Pin;
 8000352:	89bb      	ldrh	r3, [r7, #12]
 8000354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000358:	81bb      	strh	r3, [r7, #12]
	if(dat & 0x80) Set_Pins |= D7_Pin;
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	2b00      	cmp	r3, #0
 8000360:	da04      	bge.n	800036c <WriteData+0xe8>
 8000362:	89fb      	ldrh	r3, [r7, #14]
 8000364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000368:	81fb      	strh	r3, [r7, #14]
 800036a:	e003      	b.n	8000374 <WriteData+0xf0>
	else Rst_Pins |= D7_Pin;
 800036c:	89bb      	ldrh	r3, [r7, #12]
 800036e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000372:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, Set_Pins, GPIO_PIN_SET);
 8000374:	89fb      	ldrh	r3, [r7, #14]
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	@ (8000394 <WriteData+0x110>)
 800037c:	f001 fc73 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Rst_Pins, GPIO_PIN_RESET);
 8000380:	89bb      	ldrh	r3, [r7, #12]
 8000382:	2200      	movs	r2, #0
 8000384:	4619      	mov	r1, r3
 8000386:	4803      	ldr	r0, [pc, #12]	@ (8000394 <WriteData+0x110>)
 8000388:	f001 fc6d 	bl	8001c66 <HAL_GPIO_WritePin>
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010800 	.word	0x40010800

08000398 <LCD_Busy_Wait>:

//LCD忙等待
void LCD_Busy_Wait()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	uint8_t status;
	DataDir('I');
 800039e:	2049      	movs	r0, #73	@ 0x49
 80003a0:	f7ff fede 	bl	8000160 <DataDir>
	RS_InstructionR();
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003aa:	4811      	ldr	r0, [pc, #68]	@ (80003f0 <LCD_Busy_Wait+0x58>)
 80003ac:	f001 fc5b 	bl	8001c66 <HAL_GPIO_WritePin>
	RW_Read();
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003b6:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <LCD_Busy_Wait+0x58>)
 80003b8:	f001 fc55 	bl	8001c66 <HAL_GPIO_WritePin>
	do
	{
		E_Set();
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c2:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <LCD_Busy_Wait+0x58>)
 80003c4:	f001 fc4f 	bl	8001c66 <HAL_GPIO_WritePin>
		__NOP();
 80003c8:	bf00      	nop
		status = ReadData();
 80003ca:	f7ff fef7 	bl	80001bc <ReadData>
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
		E_Rst();
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003d8:	4805      	ldr	r0, [pc, #20]	@ (80003f0 <LCD_Busy_Wait+0x58>)
 80003da:	f001 fc44 	bl	8001c66 <HAL_GPIO_WritePin>
	}
	while(status & 0x80);
 80003de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	dbea      	blt.n	80003bc <LCD_Busy_Wait+0x24>
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40010c00 	.word	0x40010c00

080003f4 <LCD_Write_Cmd>:

//写LCD指令
void LCD_Write_Cmd(uint8_t cmd)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	DataDir('O');
 80003fe:	204f      	movs	r0, #79	@ 0x4f
 8000400:	f7ff feae 	bl	8000160 <DataDir>
	WriteData(cmd);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff3c 	bl	8000284 <WriteData>
	RS_InstructionR();
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000412:	4817      	ldr	r0, [pc, #92]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 8000414:	f001 fc27 	bl	8001c66 <HAL_GPIO_WritePin>
	RW_Write();
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800041e:	4814      	ldr	r0, [pc, #80]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 8000420:	f001 fc21 	bl	8001c66 <HAL_GPIO_WritePin>
	E_Rst();
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800042a:	4811      	ldr	r0, [pc, #68]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 800042c:	f001 fc1b 	bl	8001c66 <HAL_GPIO_WritePin>
	RS_InstructionR();
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000436:	480e      	ldr	r0, [pc, #56]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 8000438:	f001 fc15 	bl	8001c66 <HAL_GPIO_WritePin>
	RW_Write();
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000442:	480b      	ldr	r0, [pc, #44]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 8000444:	f001 fc0f 	bl	8001c66 <HAL_GPIO_WritePin>
	E_Set();
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800044e:	4808      	ldr	r0, [pc, #32]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 8000450:	f001 fc09 	bl	8001c66 <HAL_GPIO_WritePin>
	__NOP();
 8000454:	bf00      	nop
	E_Rst();
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <LCD_Write_Cmd+0x7c>)
 800045e:	f001 fc02 	bl	8001c66 <HAL_GPIO_WritePin>
	LCD_Busy_Wait();
 8000462:	f7ff ff99 	bl	8000398 <LCD_Busy_Wait>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40010c00 	.word	0x40010c00

08000474 <LCD_Write_Data>:

//写LCD数据寄存器
void LCD_Write_Data(uint8_t dat)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	DataDir('O');
 800047e:	204f      	movs	r0, #79	@ 0x4f
 8000480:	f7ff fe6e 	bl	8000160 <DataDir>
	WriteData(dat);
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fefc 	bl	8000284 <WriteData>
	RS_DataR();
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000492:	480e      	ldr	r0, [pc, #56]	@ (80004cc <LCD_Write_Data+0x58>)
 8000494:	f001 fbe7 	bl	8001c66 <HAL_GPIO_WritePin>
	RW_Write();
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800049e:	480b      	ldr	r0, [pc, #44]	@ (80004cc <LCD_Write_Data+0x58>)
 80004a0:	f001 fbe1 	bl	8001c66 <HAL_GPIO_WritePin>
	E_Set();
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004aa:	4808      	ldr	r0, [pc, #32]	@ (80004cc <LCD_Write_Data+0x58>)
 80004ac:	f001 fbdb 	bl	8001c66 <HAL_GPIO_WritePin>
	__NOP();
 80004b0:	bf00      	nop
	E_Rst();
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <LCD_Write_Data+0x58>)
 80004ba:	f001 fbd4 	bl	8001c66 <HAL_GPIO_WritePin>
	LCD_Busy_Wait();
 80004be:	f7ff ff6b 	bl	8000398 <LCD_Busy_Wait>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40010c00 	.word	0x40010c00

080004d0 <LCD_Init>:

//LCD初始化
void LCD_Init()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	LCD_Write_Cmd(0x38);
 80004d4:	2038      	movs	r0, #56	@ 0x38
 80004d6:	f7ff ff8d 	bl	80003f4 <LCD_Write_Cmd>
	HAL_Delay(2);
 80004da:	2002      	movs	r0, #2
 80004dc:	f001 f920 	bl	8001720 <HAL_Delay>
	LCD_Write_Cmd(0x01);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f7ff ff87 	bl	80003f4 <LCD_Write_Cmd>
	HAL_Delay(2);
 80004e6:	2002      	movs	r0, #2
 80004e8:	f001 f91a 	bl	8001720 <HAL_Delay>
	LCD_Write_Cmd(0x06);
 80004ec:	2006      	movs	r0, #6
 80004ee:	f7ff ff81 	bl	80003f4 <LCD_Write_Cmd>
	HAL_Delay(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f001 f914 	bl	8001720 <HAL_Delay>
	LCD_Write_Cmd(0x0c);
 80004f8:	200c      	movs	r0, #12
 80004fa:	f7ff ff7b 	bl	80003f4 <LCD_Write_Cmd>
	HAL_Delay(2);
 80004fe:	2002      	movs	r0, #2
 8000500:	f001 f90e 	bl	8001720 <HAL_Delay>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_ShowString>:

//在x行（0-1），y列（0-15）显示字符串
void LCD_ShowString(uint8_t x, uint8_t y, char *str)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	603a      	str	r2, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	460b      	mov	r3, r1
 8000516:	71bb      	strb	r3, [r7, #6]
	uint8_t i=0;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
	//设置显示起始位置
	if(x == 0)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d107      	bne.n	8000532 <LCD_ShowString+0x2a>
		LCD_Write_Cmd(0x80|y);
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff62 	bl	80003f4 <LCD_Write_Cmd>
 8000530:	e009      	b.n	8000546 <LCD_ShowString+0x3e>
	else if(x == 1)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d106      	bne.n	8000546 <LCD_ShowString+0x3e>
		LCD_Write_Cmd(0xc0|y);
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff57 	bl	80003f4 <LCD_Write_Cmd>
	//输出字符串
	for(i=0; i<16 && str[i]!='\0'; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e00c      	b.n	8000566 <LCD_ShowString+0x5e>
	{
		LCD_Write_Data(str[i]);
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	4413      	add	r3, r2
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff8d 	bl	8000474 <LCD_Write_Data>
		HAL_Delay(2);
 800055a:	2002      	movs	r0, #2
 800055c:	f001 f8e0 	bl	8001720 <HAL_Delay>
	for(i=0; i<16 && str[i]!='\0'; i++)
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	3301      	adds	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d805      	bhi.n	8000578 <LCD_ShowString+0x70>
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1e9      	bne.n	800054c <LCD_ShowString+0x44>
	}
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b09f      	sub	sp, #124	@ 0x7c
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char str0[10]="\0";
 8000586:	2300      	movs	r3, #0
 8000588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800058a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	809a      	strh	r2, [r3, #4]
	char str1[10]="\0";
 8000594:	2300      	movs	r3, #0
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000598:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	809a      	strh	r2, [r3, #4]
	char str2[10]="\0";
 80005a2:	2300      	movs	r3, #0
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80005a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	809a      	strh	r2, [r3, #4]

	char str[20]="\0";
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f84b 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 fcab 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fce5 	bl	8000f98 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();  //初始化LCD1602
 80005ce:	f7ff ff7f 	bl	80004d0 <LCD_Init>
  LCD_ShowString(0,0,str);  //LCD 显示设定字符
 80005d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff94 	bl	8000508 <LCD_ShowString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int num[3] = {0,0,0};
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  int num_change_flag[3] = {0,0,0};
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  int result = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	677b      	str	r3, [r7, #116]	@ 0x74
  int result_flag = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	673b      	str	r3, [r7, #112]	@ 0x70
  int invalid_input_flag = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	66fb      	str	r3, [r7, #108]	@ 0x6c

  char* op[2] = {"",""};
 8000604:	4ac4      	ldr	r2, [pc, #784]	@ (8000918 <main+0x398>)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060e:	e883 0003 	stmia.w	r3, {r0, r1}
  int op_flag[2] = {0,0};
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]

  int i = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	66bb      	str	r3, [r7, #104]	@ 0x68


  while (1)
  {
	  int m = keyScan();
 800061e:	f000 fdd1 	bl	80011c4 <keyScan>
 8000622:	6678      	str	r0, [r7, #100]	@ 0x64
	  switch(m){
 8000624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000626:	2b0f      	cmp	r3, #15
 8000628:	f200 83f9 	bhi.w	8000e1e <main+0x89e>
 800062c:	a201      	add	r2, pc, #4	@ (adr r2, 8000634 <main+0xb4>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000675 	.word	0x08000675
 8000638:	080006ab 	.word	0x080006ab
 800063c:	080006e1 	.word	0x080006e1
 8000640:	08000717 	.word	0x08000717
 8000644:	0800074d 	.word	0x0800074d
 8000648:	08000783 	.word	0x08000783
 800064c:	080007b9 	.word	0x080007b9
 8000650:	080007ef 	.word	0x080007ef
 8000654:	08000825 	.word	0x08000825
 8000658:	0800085d 	.word	0x0800085d
 800065c:	08000895 	.word	0x08000895
 8000660:	080008d3 	.word	0x080008d3
 8000664:	0800093d 	.word	0x0800093d
 8000668:	0800099b 	.word	0x0800099b
 800066c:	080009f9 	.word	0x080009f9
 8000670:	08000a57 	.word	0x08000a57
	  case 0:
		  result_flag = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+0;
 8000678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3378      	adds	r3, #120	@ 0x78
 800067e:	443b      	add	r3, r7
 8000680:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8000684:	4613      	mov	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	461a      	mov	r2, r3
 800068e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	3378      	adds	r3, #120	@ 0x78
 8000694:	443b      	add	r3, r7
 8000696:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 800069a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	3378      	adds	r3, #120	@ 0x78
 80006a0:	443b      	add	r3, r7
 80006a2:	2201      	movs	r2, #1
 80006a4:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 80006a8:	e3b9      	b.n	8000e1e <main+0x89e>
	  case 1:
		  result_flag = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+1;
 80006ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	3378      	adds	r3, #120	@ 0x78
 80006b4:	443b      	add	r3, r7
 80006b6:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	3378      	adds	r3, #120	@ 0x78
 80006ca:	443b      	add	r3, r7
 80006cc:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 80006d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	3378      	adds	r3, #120	@ 0x78
 80006d6:	443b      	add	r3, r7
 80006d8:	2201      	movs	r2, #1
 80006da:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 80006de:	e39e      	b.n	8000e1e <main+0x89e>
	  case 2:
		  result_flag = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+2;
 80006e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	3378      	adds	r3, #120	@ 0x78
 80006ea:	443b      	add	r3, r7
 80006ec:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1c9a      	adds	r2, r3, #2
 80006fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	3378      	adds	r3, #120	@ 0x78
 8000700:	443b      	add	r3, r7
 8000702:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 8000706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	3378      	adds	r3, #120	@ 0x78
 800070c:	443b      	add	r3, r7
 800070e:	2201      	movs	r2, #1
 8000710:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 8000714:	e383      	b.n	8000e1e <main+0x89e>
	  case 3:
		  result_flag = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+3;
 800071a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	3378      	adds	r3, #120	@ 0x78
 8000720:	443b      	add	r3, r7
 8000722:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	1cda      	adds	r2, r3, #3
 8000730:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	3378      	adds	r3, #120	@ 0x78
 8000736:	443b      	add	r3, r7
 8000738:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 800073c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	3378      	adds	r3, #120	@ 0x78
 8000742:	443b      	add	r3, r7
 8000744:	2201      	movs	r2, #1
 8000746:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 800074a:	e368      	b.n	8000e1e <main+0x89e>
	  case 4:
		  result_flag = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+4;
 8000750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	3378      	adds	r3, #120	@ 0x78
 8000756:	443b      	add	r3, r7
 8000758:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	1d1a      	adds	r2, r3, #4
 8000766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	3378      	adds	r3, #120	@ 0x78
 800076c:	443b      	add	r3, r7
 800076e:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 8000772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	3378      	adds	r3, #120	@ 0x78
 8000778:	443b      	add	r3, r7
 800077a:	2201      	movs	r2, #1
 800077c:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 8000780:	e34d      	b.n	8000e1e <main+0x89e>
	  case 5:
		  result_flag = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+5;
 8000786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	3378      	adds	r3, #120	@ 0x78
 800078c:	443b      	add	r3, r7
 800078e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	1d5a      	adds	r2, r3, #5
 800079c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	3378      	adds	r3, #120	@ 0x78
 80007a2:	443b      	add	r3, r7
 80007a4:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 80007a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	3378      	adds	r3, #120	@ 0x78
 80007ae:	443b      	add	r3, r7
 80007b0:	2201      	movs	r2, #1
 80007b2:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 80007b6:	e332      	b.n	8000e1e <main+0x89e>
	  case 6:
		  result_flag = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+6;
 80007bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	3378      	adds	r3, #120	@ 0x78
 80007c2:	443b      	add	r3, r7
 80007c4:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	1d9a      	adds	r2, r3, #6
 80007d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	3378      	adds	r3, #120	@ 0x78
 80007d8:	443b      	add	r3, r7
 80007da:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 80007de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	3378      	adds	r3, #120	@ 0x78
 80007e4:	443b      	add	r3, r7
 80007e6:	2201      	movs	r2, #1
 80007e8:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 80007ec:	e317      	b.n	8000e1e <main+0x89e>
	  case 7:
		  result_flag = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+7;
 80007f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	3378      	adds	r3, #120	@ 0x78
 80007f8:	443b      	add	r3, r7
 80007fa:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	1dda      	adds	r2, r3, #7
 8000808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	3378      	adds	r3, #120	@ 0x78
 800080e:	443b      	add	r3, r7
 8000810:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 8000814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	3378      	adds	r3, #120	@ 0x78
 800081a:	443b      	add	r3, r7
 800081c:	2201      	movs	r2, #1
 800081e:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 8000822:	e2fc      	b.n	8000e1e <main+0x89e>
	  case 8:
		  result_flag = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+8;
 8000828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	3378      	adds	r3, #120	@ 0x78
 800082e:	443b      	add	r3, r7
 8000830:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	f103 0208 	add.w	r2, r3, #8
 8000840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	3378      	adds	r3, #120	@ 0x78
 8000846:	443b      	add	r3, r7
 8000848:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 800084c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	3378      	adds	r3, #120	@ 0x78
 8000852:	443b      	add	r3, r7
 8000854:	2201      	movs	r2, #1
 8000856:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 800085a:	e2e0      	b.n	8000e1e <main+0x89e>
	  case 9:
		  result_flag = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	673b      	str	r3, [r7, #112]	@ 0x70
		  num[i] = num[i]*10+9;
 8000860:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	3378      	adds	r3, #120	@ 0x78
 8000866:	443b      	add	r3, r7
 8000868:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	f103 0209 	add.w	r2, r3, #9
 8000878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	3378      	adds	r3, #120	@ 0x78
 800087e:	443b      	add	r3, r7
 8000880:	f843 2c58 	str.w	r2, [r3, #-88]
		  num_change_flag[i] = 1;
 8000884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	3378      	adds	r3, #120	@ 0x78
 800088a:	443b      	add	r3, r7
 800088c:	2201      	movs	r2, #1
 800088e:	f843 2c64 	str.w	r2, [r3, #-100]
		  break;
 8000892:	e2c4      	b.n	8000e1e <main+0x89e>
	  case 10: //CLR
		  num[0] = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
		  num[1] = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
		  num[2] = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
		  num_change_flag[0] = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
		  num_change_flag[1] = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
		  num_change_flag[2] = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

		  result = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	677b      	str	r3, [r7, #116]	@ 0x74
		  result_flag = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	673b      	str	r3, [r7, #112]	@ 0x70
		  invalid_input_flag = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

		  op[0] = "";
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <main+0x39c>)
 80008ba:	60fb      	str	r3, [r7, #12]
		  op[1] = "";
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <main+0x39c>)
 80008be:	613b      	str	r3, [r7, #16]
		  op_flag[0] = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
		  op_flag[0] = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]

		  i=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	66bb      	str	r3, [r7, #104]	@ 0x68

		  LCD_Init();
 80008cc:	f7ff fe00 	bl	80004d0 <LCD_Init>
		  break;
 80008d0:	e2a5      	b.n	8000e1e <main+0x89e>
	  case 11: // *
		  result_flag = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	673b      	str	r3, [r7, #112]	@ 0x70
		  if(num_change_flag[0]==0) break;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 828f 	beq.w	8000dfc <main+0x87c>
		  if(num_change_flag[0]==1&&num_change_flag[1]==0){
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d109      	bne.n	80008f8 <main+0x378>
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d106      	bne.n	80008f8 <main+0x378>
			  i = 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[0] = "*";
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <main+0x3a0>)
 80008f0:	60fb      	str	r3, [r7, #12]
			  op_flag[0] = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	e020      	b.n	800093a <main+0x3ba>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==0){
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d112      	bne.n	8000924 <main+0x3a4>
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10f      	bne.n	8000924 <main+0x3a4>
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10c      	bne.n	8000924 <main+0x3a4>
			  i = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[1] = "*";
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <main+0x3a0>)
 8000910:	613b      	str	r3, [r7, #16]
			  op_flag[1] = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	e010      	b.n	800093a <main+0x3ba>
 8000918:	080025c0 	.word	0x080025c0
 800091c:	0800259c 	.word	0x0800259c
 8000920:	080025a0 	.word	0x080025a0
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==1){
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2b01      	cmp	r3, #1
 8000928:	f040 826a 	bne.w	8000e00 <main+0x880>
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2b01      	cmp	r3, #1
 8000930:	f040 8266 	bne.w	8000e00 <main+0x880>
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	2b01      	cmp	r3, #1
			  break;
		  }
		  break;
 8000938:	e262      	b.n	8000e00 <main+0x880>
 800093a:	e261      	b.n	8000e00 <main+0x880>
	  case 12: // ÷
		  result_flag = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	673b      	str	r3, [r7, #112]	@ 0x70
		  if(num_change_flag[0]==0) break;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 825e 	beq.w	8000e04 <main+0x884>
		  if(num_change_flag[0]==1&&num_change_flag[1]==0){
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d109      	bne.n	8000962 <main+0x3e2>
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d106      	bne.n	8000962 <main+0x3e2>
			  i = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[0] = "/";
 8000958:	4b97      	ldr	r3, [pc, #604]	@ (8000bb8 <main+0x638>)
 800095a:	60fb      	str	r3, [r7, #12]
			  op_flag[0] = 1;
 800095c:	2301      	movs	r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	e01a      	b.n	8000998 <main+0x418>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==0){
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10c      	bne.n	8000982 <main+0x402>
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d109      	bne.n	8000982 <main+0x402>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d106      	bne.n	8000982 <main+0x402>
			  i = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[1] = "/";
 8000978:	4b8f      	ldr	r3, [pc, #572]	@ (8000bb8 <main+0x638>)
 800097a:	613b      	str	r3, [r7, #16]
			  op_flag[1] = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	e00a      	b.n	8000998 <main+0x418>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==1){
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b01      	cmp	r3, #1
 8000986:	f040 823f 	bne.w	8000e08 <main+0x888>
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	2b01      	cmp	r3, #1
 800098e:	f040 823b 	bne.w	8000e08 <main+0x888>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	2b01      	cmp	r3, #1
			  break;
		  }
		  break;
 8000996:	e237      	b.n	8000e08 <main+0x888>
 8000998:	e236      	b.n	8000e08 <main+0x888>
	  case 13: // +
		  result_flag = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	673b      	str	r3, [r7, #112]	@ 0x70
		  if(num_change_flag[0]==0) break;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 8233 	beq.w	8000e0c <main+0x88c>
		  if(num_change_flag[0]==1&&num_change_flag[1]==0){
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d109      	bne.n	80009c0 <main+0x440>
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d106      	bne.n	80009c0 <main+0x440>
			  i = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[0] = "+";
 80009b6:	4b81      	ldr	r3, [pc, #516]	@ (8000bbc <main+0x63c>)
 80009b8:	60fb      	str	r3, [r7, #12]
			  op_flag[0] = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e01a      	b.n	80009f6 <main+0x476>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==0){
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d10c      	bne.n	80009e0 <main+0x460>
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d109      	bne.n	80009e0 <main+0x460>
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d106      	bne.n	80009e0 <main+0x460>
			  i = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[1] = "+";
 80009d6:	4b79      	ldr	r3, [pc, #484]	@ (8000bbc <main+0x63c>)
 80009d8:	613b      	str	r3, [r7, #16]
			  op_flag[1] = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	e00a      	b.n	80009f6 <main+0x476>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==1){
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	f040 8214 	bne.w	8000e10 <main+0x890>
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	f040 8210 	bne.w	8000e10 <main+0x890>
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2b01      	cmp	r3, #1
			  break;
		  }
		  break;
 80009f4:	e20c      	b.n	8000e10 <main+0x890>
 80009f6:	e20b      	b.n	8000e10 <main+0x890>
	  case 14: // -
		  result_flag = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	673b      	str	r3, [r7, #112]	@ 0x70
		  if(num_change_flag[0]==0) break;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8208 	beq.w	8000e14 <main+0x894>
		  if(num_change_flag[0]==1&&num_change_flag[1]==0){
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d109      	bne.n	8000a1e <main+0x49e>
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <main+0x49e>
			  i = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[0] = "-";
 8000a14:	4b6a      	ldr	r3, [pc, #424]	@ (8000bc0 <main+0x640>)
 8000a16:	60fb      	str	r3, [r7, #12]
			  op_flag[0] = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	e01a      	b.n	8000a54 <main+0x4d4>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==0){
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d10c      	bne.n	8000a3e <main+0x4be>
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d109      	bne.n	8000a3e <main+0x4be>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <main+0x4be>
			  i = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	66bb      	str	r3, [r7, #104]	@ 0x68
			  op[1] = "-";
 8000a34:	4b62      	ldr	r3, [pc, #392]	@ (8000bc0 <main+0x640>)
 8000a36:	613b      	str	r3, [r7, #16]
			  op_flag[1] = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	e00a      	b.n	8000a54 <main+0x4d4>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==1){
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	f040 81e9 	bne.w	8000e18 <main+0x898>
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	f040 81e5 	bne.w	8000e18 <main+0x898>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	2b01      	cmp	r3, #1
			  break;
		  }
		  break;
 8000a52:	e1e1      	b.n	8000e18 <main+0x898>
 8000a54:	e1e0      	b.n	8000e18 <main+0x898>
	  case 15: // =
		  LCD_Init();
 8000a56:	f7ff fd3b 	bl	80004d0 <LCD_Init>
		  result_flag = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	673b      	str	r3, [r7, #112]	@ 0x70
		  if(num_change_flag[0]==0){
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 81b1 	beq.w	8000dc8 <main+0x848>
			  ;
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==0){
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <main+0x4f8>
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <main+0x4f8>
			  result = num[0];
 8000a72:	6a3b      	ldr	r3, [r7, #32]
 8000a74:	677b      	str	r3, [r7, #116]	@ 0x74
 8000a76:	e1a7      	b.n	8000dc8 <main+0x848>
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==0){
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d142      	bne.n	8000b04 <main+0x584>
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d13f      	bne.n	8000b04 <main+0x584>
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d13c      	bne.n	8000b04 <main+0x584>
			  if(!strcmp(op[0],"*")){
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	494d      	ldr	r1, [pc, #308]	@ (8000bc4 <main+0x644>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fb5c 	bl	800014c <strcmp>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <main+0x526>
				  result = num[0]*num[1];
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	677b      	str	r3, [r7, #116]	@ 0x74
			  if(!strcmp(op[0],"*")){
 8000aa4:	e18f      	b.n	8000dc6 <main+0x846>
			  }else if(!strcmp(op[0],"/")){
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4943      	ldr	r1, [pc, #268]	@ (8000bb8 <main+0x638>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb4e 	bl	800014c <strcmp>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10b      	bne.n	8000ace <main+0x54e>
				  if(num[1]==0) {
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <main+0x542>
					  invalid_input_flag = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
					  break;
 8000ac0:	e1ad      	b.n	8000e1e <main+0x89e>
				  }
				  else result = num[0]/num[1];
 8000ac2:	6a3a      	ldr	r2, [r7, #32]
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aca:	677b      	str	r3, [r7, #116]	@ 0x74
			  if(!strcmp(op[0],"*")){
 8000acc:	e17b      	b.n	8000dc6 <main+0x846>
			  }else if(!strcmp(op[0],"+")){
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	493a      	ldr	r1, [pc, #232]	@ (8000bbc <main+0x63c>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb3a 	bl	800014c <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d104      	bne.n	8000ae8 <main+0x568>
				  result = num[0]+num[1];
 8000ade:	6a3a      	ldr	r2, [r7, #32]
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	4413      	add	r3, r2
 8000ae4:	677b      	str	r3, [r7, #116]	@ 0x74
			  if(!strcmp(op[0],"*")){
 8000ae6:	e16e      	b.n	8000dc6 <main+0x846>
			  }else if(!strcmp(op[0],"-")){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4935      	ldr	r1, [pc, #212]	@ (8000bc0 <main+0x640>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb2d 	bl	800014c <strcmp>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f040 8166 	bne.w	8000dc6 <main+0x846>
				  result = num[0]-num[1];
 8000afa:	6a3a      	ldr	r2, [r7, #32]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	677b      	str	r3, [r7, #116]	@ 0x74
			  if(!strcmp(op[0],"*")){
 8000b02:	e160      	b.n	8000dc6 <main+0x846>
			  }
		  }else if(num_change_flag[0]==1&&num_change_flag[1]==1&&num_change_flag[2]==1){
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	f040 815e 	bne.w	8000dc8 <main+0x848>
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	f040 815a 	bne.w	8000dc8 <main+0x848>
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	f040 8156 	bne.w	8000dc8 <main+0x848>
			  if((!strcmp(op[0],"*")||!strcmp(op[0],"/"))&&(!strcmp(op[1],"*")||!strcmp(op[1],"/"))){
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4929      	ldr	r1, [pc, #164]	@ (8000bc4 <main+0x644>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb13 	bl	800014c <strcmp>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d007      	beq.n	8000b3c <main+0x5bc>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4922      	ldr	r1, [pc, #136]	@ (8000bb8 <main+0x638>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb0b 	bl	800014c <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14b      	bne.n	8000bd4 <main+0x654>
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4921      	ldr	r1, [pc, #132]	@ (8000bc4 <main+0x644>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fb03 	bl	800014c <strcmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <main+0x5dc>
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	491a      	ldr	r1, [pc, #104]	@ (8000bb8 <main+0x638>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fafb 	bl	800014c <strcmp>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d13b      	bne.n	8000bd4 <main+0x654>

				  if(!strcmp(op[0],"*")){
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4919      	ldr	r1, [pc, #100]	@ (8000bc4 <main+0x644>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff faf3 	bl	800014c <strcmp>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d105      	bne.n	8000b78 <main+0x5f8>
					  result = num[0]*num[1];
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b76:	e00a      	b.n	8000b8e <main+0x60e>
				  }else{
					  if(num[1]==0) {
 8000b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <main+0x604>
						  invalid_input_flag = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
						  break;
 8000b82:	e14c      	b.n	8000e1e <main+0x89e>
					  }
					  else result = num[0]/num[1];
 8000b84:	6a3a      	ldr	r2, [r7, #32]
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8c:	677b      	str	r3, [r7, #116]	@ 0x74
				  }

				  if(!strcmp(op[1],"*")){
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <main+0x644>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fada 	bl	800014c <strcmp>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <main+0x62a>
					  result = result*num[2];
 8000b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	677b      	str	r3, [r7, #116]	@ 0x74
				  if(!strcmp(op[1],"*")){
 8000ba8:	e10e      	b.n	8000dc8 <main+0x848>
				  }else{
					  if(num[2]==0) {
 8000baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10b      	bne.n	8000bc8 <main+0x648>
						  invalid_input_flag = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
						  break;
 8000bb4:	e133      	b.n	8000e1e <main+0x89e>
 8000bb6:	bf00      	nop
 8000bb8:	080025a4 	.word	0x080025a4
 8000bbc:	080025a8 	.word	0x080025a8
 8000bc0:	080025ac 	.word	0x080025ac
 8000bc4:	080025a0 	.word	0x080025a0
					  }
					  else result = result/num[2];
 8000bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bd0:	677b      	str	r3, [r7, #116]	@ 0x74
				  if(!strcmp(op[1],"*")){
 8000bd2:	e0f9      	b.n	8000dc8 <main+0x848>
				  }
			  }else if((!strcmp(op[0],"+")||!strcmp(op[0],"-"))&&(!strcmp(op[1],"+")||!strcmp(op[1],"-"))){
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	49a2      	ldr	r1, [pc, #648]	@ (8000e60 <main+0x8e0>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fab7 	bl	800014c <strcmp>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d007      	beq.n	8000bf4 <main+0x674>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	499f      	ldr	r1, [pc, #636]	@ (8000e64 <main+0x8e4>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff faaf 	bl	800014c <strcmp>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d132      	bne.n	8000c5a <main+0x6da>
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	499a      	ldr	r1, [pc, #616]	@ (8000e60 <main+0x8e0>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff faa7 	bl	800014c <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <main+0x694>
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4997      	ldr	r1, [pc, #604]	@ (8000e64 <main+0x8e4>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fa9f 	bl	800014c <strcmp>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d122      	bne.n	8000c5a <main+0x6da>
				  if(!strcmp(op[0],"+")){
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4992      	ldr	r1, [pc, #584]	@ (8000e60 <main+0x8e0>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fa97 	bl	800014c <strcmp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <main+0x6ae>
					  result = num[0]+num[1];
 8000c24:	6a3a      	ldr	r2, [r7, #32]
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	4413      	add	r3, r2
 8000c2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c2c:	e003      	b.n	8000c36 <main+0x6b6>
				  }else{
					  result = num[0]-num[1];
 8000c2e:	6a3a      	ldr	r2, [r7, #32]
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	677b      	str	r3, [r7, #116]	@ 0x74
				  }

				  if(!strcmp(op[1],"+")){
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4989      	ldr	r1, [pc, #548]	@ (8000e60 <main+0x8e0>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fa86 	bl	800014c <strcmp>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d104      	bne.n	8000c50 <main+0x6d0>
					  result = result+num[2];
 8000c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c4a:	4413      	add	r3, r2
 8000c4c:	677b      	str	r3, [r7, #116]	@ 0x74
				  if(!strcmp(op[1],"+")){
 8000c4e:	e0bb      	b.n	8000dc8 <main+0x848>
				  }else{
					  result = result-num[2];
 8000c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	677b      	str	r3, [r7, #116]	@ 0x74
				  if(!strcmp(op[1],"+")){
 8000c58:	e0b6      	b.n	8000dc8 <main+0x848>
				  }
			  }else if((!strcmp(op[0],"*")||!strcmp(op[0],"/"))&&(!strcmp(op[1],"+")||!strcmp(op[1],"-"))){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4982      	ldr	r1, [pc, #520]	@ (8000e68 <main+0x8e8>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fa74 	bl	800014c <strcmp>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d007      	beq.n	8000c7a <main+0x6fa>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	497f      	ldr	r1, [pc, #508]	@ (8000e6c <main+0x8ec>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fa6c 	bl	800014c <strcmp>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14a      	bne.n	8000d10 <main+0x790>
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4978      	ldr	r1, [pc, #480]	@ (8000e60 <main+0x8e0>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fa64 	bl	800014c <strcmp>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <main+0x71a>
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4975      	ldr	r1, [pc, #468]	@ (8000e64 <main+0x8e4>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa5c 	bl	800014c <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d13a      	bne.n	8000d10 <main+0x790>
				  if((!strcmp(op[0],"*")||!strcmp(op[0],"/"))){
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4972      	ldr	r1, [pc, #456]	@ (8000e68 <main+0x8e8>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa54 	bl	800014c <strcmp>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <main+0x73a>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	496f      	ldr	r1, [pc, #444]	@ (8000e6c <main+0x8ec>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fa4c 	bl	800014c <strcmp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d118      	bne.n	8000cec <main+0x76c>
					  if(!strcmp(op[0],"*")){
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	496a      	ldr	r1, [pc, #424]	@ (8000e68 <main+0x8e8>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa44 	bl	800014c <strcmp>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <main+0x756>
						  result = num[0]*num[1];
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8000cd4:	e00a      	b.n	8000cec <main+0x76c>
					  }else{
						  if(num[1]==0) {
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <main+0x762>
							  invalid_input_flag = 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
							  break;
 8000ce0:	e09d      	b.n	8000e1e <main+0x89e>
						  }
						  else result = num[0]/num[1];
 8000ce2:	6a3a      	ldr	r2, [r7, #32]
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	677b      	str	r3, [r7, #116]	@ 0x74
					  }
				  }
				  if(!strcmp(op[1],"+")){
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	495c      	ldr	r1, [pc, #368]	@ (8000e60 <main+0x8e0>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa2b 	bl	800014c <strcmp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d104      	bne.n	8000d06 <main+0x786>
					  result = result+num[2];
 8000cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d00:	4413      	add	r3, r2
 8000d02:	677b      	str	r3, [r7, #116]	@ 0x74
				  if(!strcmp(op[1],"+")){
 8000d04:	e060      	b.n	8000dc8 <main+0x848>
				  }else{
					  result = result-num[2];
 8000d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	677b      	str	r3, [r7, #116]	@ 0x74
				  if(!strcmp(op[1],"+")){
 8000d0e:	e05b      	b.n	8000dc8 <main+0x848>
				  }

			  }else if((!strcmp(op[0],"+")||!strcmp(op[0],"-"))&&(!strcmp(op[1],"*")||!strcmp(op[1],"/"))){
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4953      	ldr	r1, [pc, #332]	@ (8000e60 <main+0x8e0>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa19 	bl	800014c <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d007      	beq.n	8000d30 <main+0x7b0>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4950      	ldr	r1, [pc, #320]	@ (8000e64 <main+0x8e4>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa11 	bl	800014c <strcmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14b      	bne.n	8000dc8 <main+0x848>
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	494d      	ldr	r1, [pc, #308]	@ (8000e68 <main+0x8e8>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fa09 	bl	800014c <strcmp>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d007      	beq.n	8000d50 <main+0x7d0>
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	494a      	ldr	r1, [pc, #296]	@ (8000e6c <main+0x8ec>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fa01 	bl	800014c <strcmp>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d13b      	bne.n	8000dc8 <main+0x848>
				  if((!strcmp(op[1],"*")||!strcmp(op[1],"/"))){
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4945      	ldr	r1, [pc, #276]	@ (8000e68 <main+0x8e8>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff f9f9 	bl	800014c <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <main+0x7f0>
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4942      	ldr	r1, [pc, #264]	@ (8000e6c <main+0x8ec>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff f9f1 	bl	800014c <strcmp>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d118      	bne.n	8000da2 <main+0x822>
					  if(!strcmp(op[1],"*")){
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	493d      	ldr	r1, [pc, #244]	@ (8000e68 <main+0x8e8>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff f9e9 	bl	800014c <strcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <main+0x80c>
						  result = num[1]*num[2];
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d8a:	e00a      	b.n	8000da2 <main+0x822>
					  }else{
						  if(num[2]==0) {
 8000d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <main+0x818>
							  invalid_input_flag = 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
							  break;
 8000d96:	e042      	b.n	8000e1e <main+0x89e>
						  }
						  else result = num[1]/num[2];
 8000d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da0:	677b      	str	r3, [r7, #116]	@ 0x74
					  }
				  }
				  if(!strcmp(op[0],"+")){
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	492e      	ldr	r1, [pc, #184]	@ (8000e60 <main+0x8e0>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff f9d0 	bl	800014c <strcmp>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <main+0x83c>
					  result = result+num[0];
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000db6:	4413      	add	r3, r2
 8000db8:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dba:	e005      	b.n	8000dc8 <main+0x848>
				  }else{
					  result = num[0]-result;
 8000dbc:	6a3a      	ldr	r2, [r7, #32]
 8000dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dc4:	e000      	b.n	8000dc8 <main+0x848>
			  if(!strcmp(op[0],"*")){
 8000dc6:	bf00      	nop
				  }
			  }
		  }

		  if(invalid_input_flag==0) {
 8000dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d126      	bne.n	8000e1c <main+0x89c>
			  num[0] = result;
 8000dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dd0:	623b      	str	r3, [r7, #32]
			  num[1] = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
			  num[2] = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
			  num_change_flag[0] = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
			  num_change_flag[1] = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
			  num_change_flag[2] = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]

			  op[0] = "";
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <main+0x8f0>)
 8000de8:	60fb      	str	r3, [r7, #12]
			  op[1] = "";
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <main+0x8f0>)
 8000dec:	613b      	str	r3, [r7, #16]
			  op_flag[0] = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
			  op_flag[0] = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]

			  i=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	66bb      	str	r3, [r7, #104]	@ 0x68
		  }
		  break;
 8000dfa:	e00f      	b.n	8000e1c <main+0x89c>
		  if(num_change_flag[0]==0) break;
 8000dfc:	bf00      	nop
 8000dfe:	e00e      	b.n	8000e1e <main+0x89e>
		  break;
 8000e00:	bf00      	nop
 8000e02:	e00c      	b.n	8000e1e <main+0x89e>
		  if(num_change_flag[0]==0) break;
 8000e04:	bf00      	nop
 8000e06:	e00a      	b.n	8000e1e <main+0x89e>
		  break;
 8000e08:	bf00      	nop
 8000e0a:	e008      	b.n	8000e1e <main+0x89e>
		  if(num_change_flag[0]==0) break;
 8000e0c:	bf00      	nop
 8000e0e:	e006      	b.n	8000e1e <main+0x89e>
		  break;
 8000e10:	bf00      	nop
 8000e12:	e004      	b.n	8000e1e <main+0x89e>
		  if(num_change_flag[0]==0) break;
 8000e14:	bf00      	nop
 8000e16:	e002      	b.n	8000e1e <main+0x89e>
		  break;
 8000e18:	bf00      	nop
 8000e1a:	e000      	b.n	8000e1e <main+0x89e>
		  break;
 8000e1c:	bf00      	nop
	  }


	  memset(str, '\0', sizeof(str));
 8000e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e22:	2214      	movs	r2, #20
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fb70 	bl	800250c <memset>

	  if(result_flag){
 8000e2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d022      	beq.n	8000e78 <main+0x8f8>
		  if(invalid_input_flag) strcpy(str, "invalid input!");
 8000e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <main+0x8d0>
 8000e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <main+0x8f4>)
 8000e3e:	461c      	mov	r4, r3
 8000e40:	4613      	mov	r3, r2
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	c407      	stmia	r4!, {r0, r1, r2}
 8000e46:	8023      	strh	r3, [r4, #0]
 8000e48:	3402      	adds	r4, #2
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	7023      	strb	r3, [r4, #0]
 8000e4e:	e05d      	b.n	8000f0c <main+0x98c>
		  else{
			  itoa(result, str, 10);
 8000e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e54:	220a      	movs	r2, #10
 8000e56:	4619      	mov	r1, r3
 8000e58:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000e5a:	f001 fb13 	bl	8002484 <itoa>
 8000e5e:	e055      	b.n	8000f0c <main+0x98c>
 8000e60:	080025a8 	.word	0x080025a8
 8000e64:	080025ac 	.word	0x080025ac
 8000e68:	080025a0 	.word	0x080025a0
 8000e6c:	080025a4 	.word	0x080025a4
 8000e70:	0800259c 	.word	0x0800259c
 8000e74:	080025b0 	.word	0x080025b0
		  }
	  }else{
		  itoa(num[0], str0, 10);
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000e7e:	220a      	movs	r2, #10
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 faff 	bl	8002484 <itoa>
		  itoa(num[1], str1, 10);
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 faf8 	bl	8002484 <itoa>
		  itoa(num[2], str2, 10);
 8000e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e96:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000e9a:	220a      	movs	r2, #10
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 faf1 	bl	8002484 <itoa>

		  if(num_change_flag[0])
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <main+0x938>
			  strcat(str, str0);
 8000ea8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fb32 	bl	800251c <strcat>
		  if(op_flag[0])
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <main+0x94c>
			  strcat(str,op[0]);
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fb28 	bl	800251c <strcat>
		  if(num_change_flag[1])
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <main+0x962>
			  strcat(str, str1);
 8000ed2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 fb1d 	bl	800251c <strcat>
		  if(op_flag[1])
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <main+0x976>
			  strcat(str,op[1]);
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fb13 	bl	800251c <strcat>
		  if(num_change_flag[2])
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <main+0x98c>
			  strcat(str, str2);
 8000efc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fb08 	bl	800251c <strcat>
	  //if(op_flag) strcat(str,op);
	  //if(flag[1]&&change_flag[1]) strcat(str,str2);
	  //itoa(num[0], str, 10);
//	  int len = strlen(str);
//	  itoa(len,str,10);
	  LCD_ShowString(0,0,str);  //LCD 显示设定字符
 8000f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f10:	461a      	mov	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff faf7 	bl	8000508 <LCD_ShowString>
  {
 8000f1a:	f7ff bb80 	b.w	800061e <main+0x9e>
 8000f1e:	bf00      	nop

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b090      	sub	sp, #64	@ 0x40
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0318 	add.w	r3, r7, #24
 8000f2a:	2228      	movs	r2, #40	@ 0x28
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 faec 	bl	800250c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fe9e 	bl	8001c98 <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f62:	f000 f89f 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	230f      	movs	r3, #15
 8000f68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 f90c 	bl	800219c <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 f88b 	bl	80010a4 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3740      	adds	r7, #64	@ 0x40
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b39      	ldr	r3, [pc, #228]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a38      	ldr	r2, [pc, #224]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	4b33      	ldr	r3, [pc, #204]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a26      	ldr	r2, [pc, #152]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800100c:	2200      	movs	r2, #0
 800100e:	21ff      	movs	r1, #255	@ 0xff
 8001010:	4821      	ldr	r0, [pc, #132]	@ (8001098 <MX_GPIO_Init+0x100>)
 8001012:	f000 fe28 	bl	8001c66 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X0_Pin|X1_Pin|X2_Pin|RS_Pin
 8001016:	2200      	movs	r2, #0
 8001018:	f24e 010f 	movw	r1, #57359	@ 0xe00f
 800101c:	481f      	ldr	r0, [pc, #124]	@ (800109c <MX_GPIO_Init+0x104>)
 800101e:	f000 fe22 	bl	8001c66 <HAL_GPIO_WritePin>
                          |RW_Pin|E_Pin|X3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001022:	23ff      	movs	r3, #255	@ 0xff
 8001024:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4817      	ldr	r0, [pc, #92]	@ (8001098 <MX_GPIO_Init+0x100>)
 800103a:	f000 fc79 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin X2_Pin RS_Pin
                           RW_Pin E_Pin X3_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin|X2_Pin|RS_Pin
 800103e:	f24e 030f 	movw	r3, #57359	@ 0xe00f
 8001042:	613b      	str	r3, [r7, #16]
                          |RW_Pin|E_Pin|X3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4811      	ldr	r0, [pc, #68]	@ (800109c <MX_GPIO_Init+0x104>)
 8001058:	f000 fc6a 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : Y0_Pin */
  GPIO_InitStruct.Pin = Y0_Pin;
 800105c:	2310      	movs	r3, #16
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_GPIO_Init+0x108>)
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Y0_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	480b      	ldr	r0, [pc, #44]	@ (800109c <MX_GPIO_Init+0x104>)
 8001070:	f000 fc5e 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y1_Pin Y2_Pin Y3_Pin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Y3_Pin;
 8001074:	23e0      	movs	r3, #224	@ 0xe0
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_GPIO_Init+0x104>)
 8001088:	f000 fc52 	bl	8001930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	10110000 	.word	0x10110000

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_MspInit+0x5c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_MspInit+0x5c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <HAL_MspInit+0x5c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <HAL_MspInit+0x5c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_MspInit+0x60>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <HAL_MspInit+0x60>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 fac0 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff fff8 	bl	800116c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117e:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001180:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001194:	4c09      	ldr	r4, [pc, #36]	@ (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f001 f9cb 	bl	800253c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff f9eb 	bl	8000580 <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b4:	08002620 	.word	0x08002620
  ldr r2, =_sbss
 80011b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011bc:	2000002c 	.word	0x2000002c

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <keyScan>:





int keyScan(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	int key;
	int dot_flag;
	int flag_fs;
	int mo_flag;
	//set X0-X4 to 0111
	X0_DOWN;
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	48a8      	ldr	r0, [pc, #672]	@ (8001470 <keyScan+0x2ac>)
 80011d0:	f000 fd49 	bl	8001c66 <HAL_GPIO_WritePin>
	X1_UP;
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	48a5      	ldr	r0, [pc, #660]	@ (8001470 <keyScan+0x2ac>)
 80011da:	f000 fd44 	bl	8001c66 <HAL_GPIO_WritePin>
	X2_UP;
 80011de:	2201      	movs	r2, #1
 80011e0:	2104      	movs	r1, #4
 80011e2:	48a3      	ldr	r0, [pc, #652]	@ (8001470 <keyScan+0x2ac>)
 80011e4:	f000 fd3f 	bl	8001c66 <HAL_GPIO_WritePin>
	X3_UP;
 80011e8:	2201      	movs	r2, #1
 80011ea:	2108      	movs	r1, #8
 80011ec:	48a0      	ldr	r0, [pc, #640]	@ (8001470 <keyScan+0x2ac>)
 80011ee:	f000 fd3a 	bl	8001c66 <HAL_GPIO_WritePin>
	if(Y0 == RESET){
 80011f2:	2110      	movs	r1, #16
 80011f4:	489e      	ldr	r0, [pc, #632]	@ (8001470 <keyScan+0x2ac>)
 80011f6:	f000 fd1f 	bl	8001c38 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d117      	bne.n	8001230 <keyScan+0x6c>
		HAL_Delay(10);
 8001200:	200a      	movs	r0, #10
 8001202:	f000 fa8d 	bl	8001720 <HAL_Delay>
		if(Y0 == RESET){
 8001206:	2110      	movs	r1, #16
 8001208:	4899      	ldr	r0, [pc, #612]	@ (8001470 <keyScan+0x2ac>)
 800120a:	f000 fd15 	bl	8001c38 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d16a      	bne.n	80012ea <keyScan+0x126>
			key = 1;
 8001214:	2301      	movs	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
			while(Y0 == RESET);
 800121c:	bf00      	nop
 800121e:	2110      	movs	r1, #16
 8001220:	4893      	ldr	r0, [pc, #588]	@ (8001470 <keyScan+0x2ac>)
 8001222:	f000 fd09 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f8      	beq.n	800121e <keyScan+0x5a>
			return key;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	e20f      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y1 == RESET){
 8001230:	2120      	movs	r1, #32
 8001232:	488f      	ldr	r0, [pc, #572]	@ (8001470 <keyScan+0x2ac>)
 8001234:	f000 fd00 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d117      	bne.n	800126e <keyScan+0xaa>
		HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
 8001240:	f000 fa6e 	bl	8001720 <HAL_Delay>
		if(Y1 == RESET){
 8001244:	2120      	movs	r1, #32
 8001246:	488a      	ldr	r0, [pc, #552]	@ (8001470 <keyScan+0x2ac>)
 8001248:	f000 fcf6 	bl	8001c38 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d14b      	bne.n	80012ea <keyScan+0x126>
			key = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
			while(Y1 == RESET);
 800125a:	bf00      	nop
 800125c:	2120      	movs	r1, #32
 800125e:	4884      	ldr	r0, [pc, #528]	@ (8001470 <keyScan+0x2ac>)
 8001260:	f000 fcea 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f8      	beq.n	800125c <keyScan+0x98>
			return key;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e1f0      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y2 == RESET){
 800126e:	2140      	movs	r1, #64	@ 0x40
 8001270:	487f      	ldr	r0, [pc, #508]	@ (8001470 <keyScan+0x2ac>)
 8001272:	f000 fce1 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d117      	bne.n	80012ac <keyScan+0xe8>
		HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f000 fa4f 	bl	8001720 <HAL_Delay>
		if(Y2 == RESET){
 8001282:	2140      	movs	r1, #64	@ 0x40
 8001284:	487a      	ldr	r0, [pc, #488]	@ (8001470 <keyScan+0x2ac>)
 8001286:	f000 fcd7 	bl	8001c38 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d12c      	bne.n	80012ea <keyScan+0x126>
			key = 3;
 8001290:	2303      	movs	r3, #3
 8001292:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
			while(Y2 == RESET);
 8001298:	bf00      	nop
 800129a:	2140      	movs	r1, #64	@ 0x40
 800129c:	4874      	ldr	r0, [pc, #464]	@ (8001470 <keyScan+0x2ac>)
 800129e:	f000 fccb 	bl	8001c38 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f8      	beq.n	800129a <keyScan+0xd6>
			return key;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	e1d1      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y3 == RESET){
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	4870      	ldr	r0, [pc, #448]	@ (8001470 <keyScan+0x2ac>)
 80012b0:	f000 fcc2 	bl	8001c38 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d117      	bne.n	80012ea <keyScan+0x126>
		HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f000 fa30 	bl	8001720 <HAL_Delay>
		if(Y3 == RESET){
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	486b      	ldr	r0, [pc, #428]	@ (8001470 <keyScan+0x2ac>)
 80012c4:	f000 fcb8 	bl	8001c38 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <keyScan+0x126>
			key = 10;
 80012ce:	230a      	movs	r3, #10
 80012d0:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
			while(Y3 == RESET);
 80012d6:	bf00      	nop
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	4865      	ldr	r0, [pc, #404]	@ (8001470 <keyScan+0x2ac>)
 80012dc:	f000 fcac 	bl	8001c38 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f8      	beq.n	80012d8 <keyScan+0x114>
			return key;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e1b2      	b.n	8001650 <keyScan+0x48c>
		}
	}

	//set X0-X4 to 1011
	X0_UP;
 80012ea:	2201      	movs	r2, #1
 80012ec:	2101      	movs	r1, #1
 80012ee:	4860      	ldr	r0, [pc, #384]	@ (8001470 <keyScan+0x2ac>)
 80012f0:	f000 fcb9 	bl	8001c66 <HAL_GPIO_WritePin>
	X1_DOWN;
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	485d      	ldr	r0, [pc, #372]	@ (8001470 <keyScan+0x2ac>)
 80012fa:	f000 fcb4 	bl	8001c66 <HAL_GPIO_WritePin>
	X2_UP;
 80012fe:	2201      	movs	r2, #1
 8001300:	2104      	movs	r1, #4
 8001302:	485b      	ldr	r0, [pc, #364]	@ (8001470 <keyScan+0x2ac>)
 8001304:	f000 fcaf 	bl	8001c66 <HAL_GPIO_WritePin>
	X3_UP;
 8001308:	2201      	movs	r2, #1
 800130a:	2108      	movs	r1, #8
 800130c:	4858      	ldr	r0, [pc, #352]	@ (8001470 <keyScan+0x2ac>)
 800130e:	f000 fcaa 	bl	8001c66 <HAL_GPIO_WritePin>
	if(Y0 == RESET){
 8001312:	2110      	movs	r1, #16
 8001314:	4856      	ldr	r0, [pc, #344]	@ (8001470 <keyScan+0x2ac>)
 8001316:	f000 fc8f 	bl	8001c38 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d117      	bne.n	8001350 <keyScan+0x18c>
		HAL_Delay(10);
 8001320:	200a      	movs	r0, #10
 8001322:	f000 f9fd 	bl	8001720 <HAL_Delay>
		if(Y0 == RESET){
 8001326:	2110      	movs	r1, #16
 8001328:	4851      	ldr	r0, [pc, #324]	@ (8001470 <keyScan+0x2ac>)
 800132a:	f000 fc85 	bl	8001c38 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d16a      	bne.n	800140a <keyScan+0x246>
			key = 4;
 8001334:	2304      	movs	r3, #4
 8001336:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	603b      	str	r3, [r7, #0]
			while(Y0 == RESET);
 800133c:	bf00      	nop
 800133e:	2110      	movs	r1, #16
 8001340:	484b      	ldr	r0, [pc, #300]	@ (8001470 <keyScan+0x2ac>)
 8001342:	f000 fc79 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f8      	beq.n	800133e <keyScan+0x17a>
			return key;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	e17f      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y1 == RESET){
 8001350:	2120      	movs	r1, #32
 8001352:	4847      	ldr	r0, [pc, #284]	@ (8001470 <keyScan+0x2ac>)
 8001354:	f000 fc70 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d117      	bne.n	800138e <keyScan+0x1ca>
		HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f000 f9de 	bl	8001720 <HAL_Delay>
		if(Y1 == RESET){
 8001364:	2120      	movs	r1, #32
 8001366:	4842      	ldr	r0, [pc, #264]	@ (8001470 <keyScan+0x2ac>)
 8001368:	f000 fc66 	bl	8001c38 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d14b      	bne.n	800140a <keyScan+0x246>
			key = 5;
 8001372:	2305      	movs	r3, #5
 8001374:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
			while(Y1 == RESET);
 800137a:	bf00      	nop
 800137c:	2120      	movs	r1, #32
 800137e:	483c      	ldr	r0, [pc, #240]	@ (8001470 <keyScan+0x2ac>)
 8001380:	f000 fc5a 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f8      	beq.n	800137c <keyScan+0x1b8>
			return key;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e160      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y2 == RESET){
 800138e:	2140      	movs	r1, #64	@ 0x40
 8001390:	4837      	ldr	r0, [pc, #220]	@ (8001470 <keyScan+0x2ac>)
 8001392:	f000 fc51 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d117      	bne.n	80013cc <keyScan+0x208>
		HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f000 f9bf 	bl	8001720 <HAL_Delay>
		if(Y2 == RESET){
 80013a2:	2140      	movs	r1, #64	@ 0x40
 80013a4:	4832      	ldr	r0, [pc, #200]	@ (8001470 <keyScan+0x2ac>)
 80013a6:	f000 fc47 	bl	8001c38 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d12c      	bne.n	800140a <keyScan+0x246>
			key = 6;
 80013b0:	2306      	movs	r3, #6
 80013b2:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
			while(Y2 == RESET);
 80013b8:	bf00      	nop
 80013ba:	2140      	movs	r1, #64	@ 0x40
 80013bc:	482c      	ldr	r0, [pc, #176]	@ (8001470 <keyScan+0x2ac>)
 80013be:	f000 fc3b 	bl	8001c38 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f8      	beq.n	80013ba <keyScan+0x1f6>
			return key;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	e141      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y3 == RESET){
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	4828      	ldr	r0, [pc, #160]	@ (8001470 <keyScan+0x2ac>)
 80013d0:	f000 fc32 	bl	8001c38 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d117      	bne.n	800140a <keyScan+0x246>
		HAL_Delay(10);
 80013da:	200a      	movs	r0, #10
 80013dc:	f000 f9a0 	bl	8001720 <HAL_Delay>
		if(Y3 == RESET){
 80013e0:	2180      	movs	r1, #128	@ 0x80
 80013e2:	4823      	ldr	r0, [pc, #140]	@ (8001470 <keyScan+0x2ac>)
 80013e4:	f000 fc28 	bl	8001c38 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <keyScan+0x246>
			key = 11;
 80013ee:	230b      	movs	r3, #11
 80013f0:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
			while(Y3 == RESET);
 80013f6:	bf00      	nop
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	481d      	ldr	r0, [pc, #116]	@ (8001470 <keyScan+0x2ac>)
 80013fc:	f000 fc1c 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f8      	beq.n	80013f8 <keyScan+0x234>
			return key;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e122      	b.n	8001650 <keyScan+0x48c>
		}
	}

	//set X0-X4 to 1101
	X0_UP;
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	4818      	ldr	r0, [pc, #96]	@ (8001470 <keyScan+0x2ac>)
 8001410:	f000 fc29 	bl	8001c66 <HAL_GPIO_WritePin>
	X1_UP;
 8001414:	2201      	movs	r2, #1
 8001416:	2102      	movs	r1, #2
 8001418:	4815      	ldr	r0, [pc, #84]	@ (8001470 <keyScan+0x2ac>)
 800141a:	f000 fc24 	bl	8001c66 <HAL_GPIO_WritePin>
	X2_DOWN;
 800141e:	2200      	movs	r2, #0
 8001420:	2104      	movs	r1, #4
 8001422:	4813      	ldr	r0, [pc, #76]	@ (8001470 <keyScan+0x2ac>)
 8001424:	f000 fc1f 	bl	8001c66 <HAL_GPIO_WritePin>
	X3_UP;
 8001428:	2201      	movs	r2, #1
 800142a:	2108      	movs	r1, #8
 800142c:	4810      	ldr	r0, [pc, #64]	@ (8001470 <keyScan+0x2ac>)
 800142e:	f000 fc1a 	bl	8001c66 <HAL_GPIO_WritePin>
	if(Y0 == RESET){
 8001432:	2110      	movs	r1, #16
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <keyScan+0x2ac>)
 8001436:	f000 fbff 	bl	8001c38 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d119      	bne.n	8001474 <keyScan+0x2b0>
		HAL_Delay(10);
 8001440:	200a      	movs	r0, #10
 8001442:	f000 f96d 	bl	8001720 <HAL_Delay>
		if(Y0 == RESET){
 8001446:	2110      	movs	r1, #16
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <keyScan+0x2ac>)
 800144a:	f000 fbf5 	bl	8001c38 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d16c      	bne.n	800152e <keyScan+0x36a>
			key = 7;
 8001454:	2307      	movs	r3, #7
 8001456:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	603b      	str	r3, [r7, #0]
			while(Y0 == RESET);
 800145c:	bf00      	nop
 800145e:	2110      	movs	r1, #16
 8001460:	4803      	ldr	r0, [pc, #12]	@ (8001470 <keyScan+0x2ac>)
 8001462:	f000 fbe9 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f8      	beq.n	800145e <keyScan+0x29a>
			return key;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e0ef      	b.n	8001650 <keyScan+0x48c>
 8001470:	40010c00 	.word	0x40010c00
		}
	}else if(Y1 == RESET){
 8001474:	2120      	movs	r1, #32
 8001476:	4878      	ldr	r0, [pc, #480]	@ (8001658 <keyScan+0x494>)
 8001478:	f000 fbde 	bl	8001c38 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d117      	bne.n	80014b2 <keyScan+0x2ee>
		HAL_Delay(10);
 8001482:	200a      	movs	r0, #10
 8001484:	f000 f94c 	bl	8001720 <HAL_Delay>
		if(Y1 == RESET){
 8001488:	2120      	movs	r1, #32
 800148a:	4873      	ldr	r0, [pc, #460]	@ (8001658 <keyScan+0x494>)
 800148c:	f000 fbd4 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d14b      	bne.n	800152e <keyScan+0x36a>
			key = 8;
 8001496:	2308      	movs	r3, #8
 8001498:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
			while(Y1 == RESET);
 800149e:	bf00      	nop
 80014a0:	2120      	movs	r1, #32
 80014a2:	486d      	ldr	r0, [pc, #436]	@ (8001658 <keyScan+0x494>)
 80014a4:	f000 fbc8 	bl	8001c38 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f8      	beq.n	80014a0 <keyScan+0x2dc>
			return key;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	e0ce      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y2 == RESET){
 80014b2:	2140      	movs	r1, #64	@ 0x40
 80014b4:	4868      	ldr	r0, [pc, #416]	@ (8001658 <keyScan+0x494>)
 80014b6:	f000 fbbf 	bl	8001c38 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d117      	bne.n	80014f0 <keyScan+0x32c>
		HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 f92d 	bl	8001720 <HAL_Delay>
		if(Y2 == RESET){
 80014c6:	2140      	movs	r1, #64	@ 0x40
 80014c8:	4863      	ldr	r0, [pc, #396]	@ (8001658 <keyScan+0x494>)
 80014ca:	f000 fbb5 	bl	8001c38 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d12c      	bne.n	800152e <keyScan+0x36a>
			key = 9;
 80014d4:	2309      	movs	r3, #9
 80014d6:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
			while(Y2 == RESET);
 80014dc:	bf00      	nop
 80014de:	2140      	movs	r1, #64	@ 0x40
 80014e0:	485d      	ldr	r0, [pc, #372]	@ (8001658 <keyScan+0x494>)
 80014e2:	f000 fba9 	bl	8001c38 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f8      	beq.n	80014de <keyScan+0x31a>
			return key;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	e0af      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y3 == RESET){
 80014f0:	2180      	movs	r1, #128	@ 0x80
 80014f2:	4859      	ldr	r0, [pc, #356]	@ (8001658 <keyScan+0x494>)
 80014f4:	f000 fba0 	bl	8001c38 <HAL_GPIO_ReadPin>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d117      	bne.n	800152e <keyScan+0x36a>
		HAL_Delay(10);
 80014fe:	200a      	movs	r0, #10
 8001500:	f000 f90e 	bl	8001720 <HAL_Delay>
		if(Y3 == RESET){
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	4854      	ldr	r0, [pc, #336]	@ (8001658 <keyScan+0x494>)
 8001508:	f000 fb96 	bl	8001c38 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <keyScan+0x36a>
			key = 12;
 8001512:	230c      	movs	r3, #12
 8001514:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
			while(Y3 == RESET);
 800151a:	bf00      	nop
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	484e      	ldr	r0, [pc, #312]	@ (8001658 <keyScan+0x494>)
 8001520:	f000 fb8a 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f8      	beq.n	800151c <keyScan+0x358>
			return key;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	e090      	b.n	8001650 <keyScan+0x48c>
		}
	}

	//set X0-X4 to 1110
	X0_UP;
 800152e:	2201      	movs	r2, #1
 8001530:	2101      	movs	r1, #1
 8001532:	4849      	ldr	r0, [pc, #292]	@ (8001658 <keyScan+0x494>)
 8001534:	f000 fb97 	bl	8001c66 <HAL_GPIO_WritePin>
	X1_UP;
 8001538:	2201      	movs	r2, #1
 800153a:	2102      	movs	r1, #2
 800153c:	4846      	ldr	r0, [pc, #280]	@ (8001658 <keyScan+0x494>)
 800153e:	f000 fb92 	bl	8001c66 <HAL_GPIO_WritePin>
	X2_UP;
 8001542:	2201      	movs	r2, #1
 8001544:	2104      	movs	r1, #4
 8001546:	4844      	ldr	r0, [pc, #272]	@ (8001658 <keyScan+0x494>)
 8001548:	f000 fb8d 	bl	8001c66 <HAL_GPIO_WritePin>
	X3_DOWN;
 800154c:	2200      	movs	r2, #0
 800154e:	2108      	movs	r1, #8
 8001550:	4841      	ldr	r0, [pc, #260]	@ (8001658 <keyScan+0x494>)
 8001552:	f000 fb88 	bl	8001c66 <HAL_GPIO_WritePin>
	if(Y0 == RESET){
 8001556:	2110      	movs	r1, #16
 8001558:	483f      	ldr	r0, [pc, #252]	@ (8001658 <keyScan+0x494>)
 800155a:	f000 fb6d 	bl	8001c38 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d117      	bne.n	8001594 <keyScan+0x3d0>
		HAL_Delay(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f000 f8db 	bl	8001720 <HAL_Delay>
		if(Y0 == RESET){
 800156a:	2110      	movs	r1, #16
 800156c:	483a      	ldr	r0, [pc, #232]	@ (8001658 <keyScan+0x494>)
 800156e:	f000 fb63 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d16a      	bne.n	800164e <keyScan+0x48a>
			key = 13;
 8001578:	230d      	movs	r3, #13
 800157a:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
			while(Y0 == RESET);
 8001580:	bf00      	nop
 8001582:	2110      	movs	r1, #16
 8001584:	4834      	ldr	r0, [pc, #208]	@ (8001658 <keyScan+0x494>)
 8001586:	f000 fb57 	bl	8001c38 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f8      	beq.n	8001582 <keyScan+0x3be>
			return key;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	e05d      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y1 == RESET){
 8001594:	2120      	movs	r1, #32
 8001596:	4830      	ldr	r0, [pc, #192]	@ (8001658 <keyScan+0x494>)
 8001598:	f000 fb4e 	bl	8001c38 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d117      	bne.n	80015d2 <keyScan+0x40e>
		HAL_Delay(10);
 80015a2:	200a      	movs	r0, #10
 80015a4:	f000 f8bc 	bl	8001720 <HAL_Delay>
		if(Y1 == RESET){
 80015a8:	2120      	movs	r1, #32
 80015aa:	482b      	ldr	r0, [pc, #172]	@ (8001658 <keyScan+0x494>)
 80015ac:	f000 fb44 	bl	8001c38 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d14b      	bne.n	800164e <keyScan+0x48a>
			key = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
			while(Y1 == RESET);
 80015be:	bf00      	nop
 80015c0:	2120      	movs	r1, #32
 80015c2:	4825      	ldr	r0, [pc, #148]	@ (8001658 <keyScan+0x494>)
 80015c4:	f000 fb38 	bl	8001c38 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f8      	beq.n	80015c0 <keyScan+0x3fc>
			return key;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e03e      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y2 == RESET){
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	4820      	ldr	r0, [pc, #128]	@ (8001658 <keyScan+0x494>)
 80015d6:	f000 fb2f 	bl	8001c38 <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d117      	bne.n	8001610 <keyScan+0x44c>
		HAL_Delay(10);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 f89d 	bl	8001720 <HAL_Delay>
		if(Y2 == RESET){
 80015e6:	2140      	movs	r1, #64	@ 0x40
 80015e8:	481b      	ldr	r0, [pc, #108]	@ (8001658 <keyScan+0x494>)
 80015ea:	f000 fb25 	bl	8001c38 <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d12c      	bne.n	800164e <keyScan+0x48a>
			key = 14;
 80015f4:	230e      	movs	r3, #14
 80015f6:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
			while(Y2 == RESET);
 80015fc:	bf00      	nop
 80015fe:	2140      	movs	r1, #64	@ 0x40
 8001600:	4815      	ldr	r0, [pc, #84]	@ (8001658 <keyScan+0x494>)
 8001602:	f000 fb19 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f8      	beq.n	80015fe <keyScan+0x43a>
			return key;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	e01f      	b.n	8001650 <keyScan+0x48c>
		}
	}else if(Y3 == RESET){
 8001610:	2180      	movs	r1, #128	@ 0x80
 8001612:	4811      	ldr	r0, [pc, #68]	@ (8001658 <keyScan+0x494>)
 8001614:	f000 fb10 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d117      	bne.n	800164e <keyScan+0x48a>
		HAL_Delay(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f000 f87e 	bl	8001720 <HAL_Delay>
		if(Y3 == RESET){
 8001624:	2180      	movs	r1, #128	@ 0x80
 8001626:	480c      	ldr	r0, [pc, #48]	@ (8001658 <keyScan+0x494>)
 8001628:	f000 fb06 	bl	8001c38 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <keyScan+0x48a>
			key = 15;
 8001632:	230f      	movs	r3, #15
 8001634:	607b      	str	r3, [r7, #4]
			dot_flag = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
			while(Y3 == RESET);
 800163a:	bf00      	nop
 800163c:	2180      	movs	r1, #128	@ 0x80
 800163e:	4806      	ldr	r0, [pc, #24]	@ (8001658 <keyScan+0x494>)
 8001640:	f000 fafa 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f8      	beq.n	800163c <keyScan+0x478>
			return key;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e000      	b.n	8001650 <keyScan+0x48c>
		}
	}


	return 99;
 800164e:	2363      	movs	r3, #99	@ 0x63
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010c00 	.word	0x40010c00

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f92b 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fd1a 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f935 	bl	8001916 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f90b 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000008 	.word	0x20000008
 8001708:	20000028 	.word	0x20000028

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	@ (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000028 	.word	0x20000028

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fff0 	bl	800170c <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffe0 	bl	800170c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	@ (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	@ 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff90 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff49 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff5e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffb0 	bl	8001884 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b08b      	sub	sp, #44	@ 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e169      	b.n	8001c18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8158 	bne.w	8001c12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a9a      	ldr	r2, [pc, #616]	@ (8001bd0 <HAL_GPIO_Init+0x2a0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d05e      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800196c:	4a98      	ldr	r2, [pc, #608]	@ (8001bd0 <HAL_GPIO_Init+0x2a0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d875      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001972:	4a98      	ldr	r2, [pc, #608]	@ (8001bd4 <HAL_GPIO_Init+0x2a4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d058      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001978:	4a96      	ldr	r2, [pc, #600]	@ (8001bd4 <HAL_GPIO_Init+0x2a4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d86f      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800197e:	4a96      	ldr	r2, [pc, #600]	@ (8001bd8 <HAL_GPIO_Init+0x2a8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d052      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001984:	4a94      	ldr	r2, [pc, #592]	@ (8001bd8 <HAL_GPIO_Init+0x2a8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d869      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800198a:	4a94      	ldr	r2, [pc, #592]	@ (8001bdc <HAL_GPIO_Init+0x2ac>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d04c      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001990:	4a92      	ldr	r2, [pc, #584]	@ (8001bdc <HAL_GPIO_Init+0x2ac>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d863      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001996:	4a92      	ldr	r2, [pc, #584]	@ (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d046      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800199c:	4a90      	ldr	r2, [pc, #576]	@ (8001be0 <HAL_GPIO_Init+0x2b0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d85d      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d82a      	bhi.n	80019fc <HAL_GPIO_Init+0xcc>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d859      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019aa:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <HAL_GPIO_Init+0x80>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a05 	.word	0x08001a05
 80019b8:	08001a17 	.word	0x08001a17
 80019bc:	08001a59 	.word	0x08001a59
 80019c0:	08001a5f 	.word	0x08001a5f
 80019c4:	08001a5f 	.word	0x08001a5f
 80019c8:	08001a5f 	.word	0x08001a5f
 80019cc:	08001a5f 	.word	0x08001a5f
 80019d0:	08001a5f 	.word	0x08001a5f
 80019d4:	08001a5f 	.word	0x08001a5f
 80019d8:	08001a5f 	.word	0x08001a5f
 80019dc:	08001a5f 	.word	0x08001a5f
 80019e0:	08001a5f 	.word	0x08001a5f
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a5f 	.word	0x08001a5f
 80019ec:	08001a5f 	.word	0x08001a5f
 80019f0:	08001a5f 	.word	0x08001a5f
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a21 	.word	0x08001a21
 80019fc:	4a79      	ldr	r2, [pc, #484]	@ (8001be4 <HAL_GPIO_Init+0x2b4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e029      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e024      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01f      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e01a      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e013      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e009      	b.n	8001a60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          break;
 8001a5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	@ 0xff
 8001a64:	d801      	bhi.n	8001a6a <HAL_GPIO_Init+0x13a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_Init+0x13e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	@ 0xff
 8001a74:	d802      	bhi.n	8001a7c <HAL_GPIO_Init+0x14c>
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x152>
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	3b08      	subs	r3, #8
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	210f      	movs	r1, #15
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	6a39      	ldr	r1, [r7, #32]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80b1 	beq.w	8001c12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac8:	4a48      	ldr	r2, [pc, #288]	@ (8001bec <HAL_GPIO_Init+0x2bc>)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a40      	ldr	r2, [pc, #256]	@ (8001bf0 <HAL_GPIO_Init+0x2c0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <HAL_GPIO_Init+0x1ec>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf4 <HAL_GPIO_Init+0x2c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00d      	beq.n	8001b18 <HAL_GPIO_Init+0x1e8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf8 <HAL_GPIO_Init+0x2c8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <HAL_GPIO_Init+0x1e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_GPIO_Init+0x1e0>
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e004      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b20:	f002 0203 	and.w	r2, r2, #3
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	4093      	lsls	r3, r2
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2e:	492f      	ldr	r1, [pc, #188]	@ (8001bec <HAL_GPIO_Init+0x2bc>)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b48:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	492c      	ldr	r1, [pc, #176]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b56:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4928      	ldr	r1, [pc, #160]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4922      	ldr	r1, [pc, #136]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	491e      	ldr	r1, [pc, #120]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4918      	ldr	r1, [pc, #96]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba6:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4914      	ldr	r1, [pc, #80]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d021      	beq.n	8001c04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	490e      	ldr	r1, [pc, #56]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e021      	b.n	8001c12 <HAL_GPIO_Init+0x2e2>
 8001bce:	bf00      	nop
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40011400 	.word	0x40011400
 8001c00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_GPIO_Init+0x304>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4909      	ldr	r1, [pc, #36]	@ (8001c34 <HAL_GPIO_Init+0x304>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	3301      	adds	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f ae8e 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	372c      	adds	r7, #44	@ 0x2c
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]
 8001c72:	4613      	mov	r3, r2
 8001c74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c76:	787b      	ldrb	r3, [r7, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c82:	e003      	b.n	8001c8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e272      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb8:	4b92      	ldr	r3, [pc, #584]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00c      	beq.n	8001cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d112      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b89      	ldr	r3, [pc, #548]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d06c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d168      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e24c      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76>
 8001d00:	4b80      	ldr	r3, [pc, #512]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7f      	ldr	r2, [pc, #508]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b7b      	ldr	r3, [pc, #492]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b78      	ldr	r3, [pc, #480]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a77      	ldr	r2, [pc, #476]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xbc>
 8001d3a:	4b72      	ldr	r3, [pc, #456]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a71      	ldr	r2, [pc, #452]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d54:	4b6b      	ldr	r3, [pc, #428]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b68      	ldr	r3, [pc, #416]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a67      	ldr	r2, [pc, #412]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcca 	bl	800170c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fcc6 	bl	800170c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	@ 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e200      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe4>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fcb6 	bl	800170c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fcb2 	bl	800170c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1ec      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b53      	ldr	r3, [pc, #332]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x10c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dde:	4b49      	ldr	r3, [pc, #292]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d11c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
 8001dea:	4b46      	ldr	r3, [pc, #280]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1c0      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4939      	ldr	r1, [pc, #228]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	e03a      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2c:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fc6b 	bl	800170c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fc67 	bl	800170c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1a1      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4927      	ldr	r1, [pc, #156]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc4a 	bl	800170c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fc46 	bl	800170c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e180      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03a      	beq.n	8001f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fc2a 	bl	800170c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fc26 	bl	800170c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e160      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f000 fa9c 	bl	8002418 <RCC_Delay>
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fc10 	bl	800170c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fc0c 	bl	800170c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d908      	bls.n	8001f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e146      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	42420000 	.word	0x42420000
 8001f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b92      	ldr	r3, [pc, #584]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e9      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a6 	beq.w	8002076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b88      	ldr	r3, [pc, #544]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a87      	ldr	r2, [pc, #540]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b85      	ldr	r3, [pc, #532]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b82      	ldr	r3, [pc, #520]	@ (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f62:	4b7f      	ldr	r3, [pc, #508]	@ (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	@ (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fbcd 	bl	800170c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f76:	f7ff fbc9 	bl	800170c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b64      	cmp	r3, #100	@ 0x64
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e103      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b75      	ldr	r3, [pc, #468]	@ (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x312>
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	e02d      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x334>
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a69      	ldr	r2, [pc, #420]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b67      	ldr	r3, [pc, #412]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a66      	ldr	r2, [pc, #408]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e01c      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x356>
 8001fd4:	4b61      	ldr	r3, [pc, #388]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a60      	ldr	r2, [pc, #384]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fee:	4b5b      	ldr	r3, [pc, #364]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b58      	ldr	r3, [pc, #352]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a57      	ldr	r2, [pc, #348]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb7d 	bl	800170c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fb79 	bl	800170c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0b1      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCC_OscConfig+0x37e>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fb67 	bl	800170c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fb63 	bl	800170c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e09b      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b40      	ldr	r3, [pc, #256]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a3b      	ldr	r2, [pc, #236]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8087 	beq.w	800218e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b36      	ldr	r3, [pc, #216]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d061      	beq.n	8002150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d146      	bne.n	8002122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b33      	ldr	r3, [pc, #204]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb37 	bl	800170c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fb33 	bl	800170c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e06d      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ca:	4b24      	ldr	r3, [pc, #144]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4921      	ldr	r1, [pc, #132]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a19      	ldr	r1, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	430b      	orrs	r3, r1
 80020ee:	491b      	ldr	r1, [pc, #108]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff fb07 	bl	800170c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff fb03 	bl	800170c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e03d      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x46a>
 8002120:	e035      	b.n	800218e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff faf0 	bl	800170c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff faec 	bl	800170c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e026      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x498>
 800214e:	e01e      	b.n	800218e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e019      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
 8002164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_OscConfig+0x500>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d0      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b67      	ldr	r3, [pc, #412]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4965      	ldr	r1, [pc, #404]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b63      	ldr	r3, [pc, #396]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b8      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b59      	ldr	r3, [pc, #356]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a58      	ldr	r2, [pc, #352]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800221a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b50      	ldr	r3, [pc, #320]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494d      	ldr	r1, [pc, #308]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d040      	beq.n	80022bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d115      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e073      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06b      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4936      	ldr	r1, [pc, #216]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800228c:	f7ff fa3e 	bl	800170c <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	e00a      	b.n	80022aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7ff fa3a 	bl	800170c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e053      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 020c 	and.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1eb      	bne.n	8002294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d210      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4922      	ldr	r1, [pc, #136]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b20      	ldr	r3, [pc, #128]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e032      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4916      	ldr	r1, [pc, #88]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002316:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490e      	ldr	r1, [pc, #56]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f821 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	490a      	ldr	r1, [pc, #40]	@ (8002364 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_RCC_ClockConfig+0x1cc>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002346:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_RCC_ClockConfig+0x1d0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f99c 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	080025c8 	.word	0x080025c8
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x94>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x30>
 800239a:	2b08      	cmp	r3, #8
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x36>
 800239e:	e027      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	613b      	str	r3, [r7, #16]
      break;
 80023a4:	e027      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	4a17      	ldr	r2, [pc, #92]	@ (800240c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b0:	5cd3      	ldrb	r3, [r2, r3]
 80023b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x94>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0c5b      	lsrs	r3, r3, #17
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	4a11      	ldr	r2, [pc, #68]	@ (8002410 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d2:	fb03 f202 	mul.w	r2, r3, r2
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e004      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002414 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	613b      	str	r3, [r7, #16]
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x98>)
 80023f2:	613b      	str	r3, [r7, #16]
      break;
 80023f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f6:	693b      	ldr	r3, [r7, #16]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	007a1200 	.word	0x007a1200
 800240c:	080025d8 	.word	0x080025d8
 8002410:	080025e8 	.word	0x080025e8
 8002414:	003d0900 	.word	0x003d0900

08002418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <RCC_Delay+0x34>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <RCC_Delay+0x38>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0a5b      	lsrs	r3, r3, #9
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002434:	bf00      	nop
  }
  while (Delay --);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <RCC_Delay+0x1c>
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000000 	.word	0x20000000
 8002450:	10624dd3 	.word	0x10624dd3

08002454 <__itoa>:
 8002454:	1e93      	subs	r3, r2, #2
 8002456:	2b22      	cmp	r3, #34	@ 0x22
 8002458:	b510      	push	{r4, lr}
 800245a:	460c      	mov	r4, r1
 800245c:	d904      	bls.n	8002468 <__itoa+0x14>
 800245e:	2300      	movs	r3, #0
 8002460:	461c      	mov	r4, r3
 8002462:	700b      	strb	r3, [r1, #0]
 8002464:	4620      	mov	r0, r4
 8002466:	bd10      	pop	{r4, pc}
 8002468:	2a0a      	cmp	r2, #10
 800246a:	d109      	bne.n	8002480 <__itoa+0x2c>
 800246c:	2800      	cmp	r0, #0
 800246e:	da07      	bge.n	8002480 <__itoa+0x2c>
 8002470:	232d      	movs	r3, #45	@ 0x2d
 8002472:	700b      	strb	r3, [r1, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	4240      	negs	r0, r0
 8002478:	4421      	add	r1, r4
 800247a:	f000 f805 	bl	8002488 <__utoa>
 800247e:	e7f1      	b.n	8002464 <__itoa+0x10>
 8002480:	2100      	movs	r1, #0
 8002482:	e7f9      	b.n	8002478 <__itoa+0x24>

08002484 <itoa>:
 8002484:	f7ff bfe6 	b.w	8002454 <__itoa>

08002488 <__utoa>:
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	b08b      	sub	sp, #44	@ 0x2c
 800248c:	4605      	mov	r5, r0
 800248e:	460b      	mov	r3, r1
 8002490:	466e      	mov	r6, sp
 8002492:	4c1d      	ldr	r4, [pc, #116]	@ (8002508 <__utoa+0x80>)
 8002494:	f104 0c20 	add.w	ip, r4, #32
 8002498:	4637      	mov	r7, r6
 800249a:	6820      	ldr	r0, [r4, #0]
 800249c:	6861      	ldr	r1, [r4, #4]
 800249e:	3408      	adds	r4, #8
 80024a0:	c703      	stmia	r7!, {r0, r1}
 80024a2:	4564      	cmp	r4, ip
 80024a4:	463e      	mov	r6, r7
 80024a6:	d1f7      	bne.n	8002498 <__utoa+0x10>
 80024a8:	7921      	ldrb	r1, [r4, #4]
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	7139      	strb	r1, [r7, #4]
 80024ae:	1e91      	subs	r1, r2, #2
 80024b0:	2922      	cmp	r1, #34	@ 0x22
 80024b2:	6038      	str	r0, [r7, #0]
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	d904      	bls.n	80024c4 <__utoa+0x3c>
 80024ba:	7019      	strb	r1, [r3, #0]
 80024bc:	460b      	mov	r3, r1
 80024be:	4618      	mov	r0, r3
 80024c0:	b00b      	add	sp, #44	@ 0x2c
 80024c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c4:	1e58      	subs	r0, r3, #1
 80024c6:	4684      	mov	ip, r0
 80024c8:	fbb5 f7f2 	udiv	r7, r5, r2
 80024cc:	fb02 5617 	mls	r6, r2, r7, r5
 80024d0:	3628      	adds	r6, #40	@ 0x28
 80024d2:	446e      	add	r6, sp
 80024d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80024d8:	460c      	mov	r4, r1
 80024da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80024de:	462e      	mov	r6, r5
 80024e0:	42b2      	cmp	r2, r6
 80024e2:	463d      	mov	r5, r7
 80024e4:	f101 0101 	add.w	r1, r1, #1
 80024e8:	d9ee      	bls.n	80024c8 <__utoa+0x40>
 80024ea:	2200      	movs	r2, #0
 80024ec:	545a      	strb	r2, [r3, r1]
 80024ee:	1919      	adds	r1, r3, r4
 80024f0:	1aa5      	subs	r5, r4, r2
 80024f2:	42aa      	cmp	r2, r5
 80024f4:	dae3      	bge.n	80024be <__utoa+0x36>
 80024f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80024fa:	780e      	ldrb	r6, [r1, #0]
 80024fc:	3201      	adds	r2, #1
 80024fe:	7006      	strb	r6, [r0, #0]
 8002500:	f801 5901 	strb.w	r5, [r1], #-1
 8002504:	e7f4      	b.n	80024f0 <__utoa+0x68>
 8002506:	bf00      	nop
 8002508:	080025ea 	.word	0x080025ea

0800250c <memset>:
 800250c:	4603      	mov	r3, r0
 800250e:	4402      	add	r2, r0
 8002510:	4293      	cmp	r3, r2
 8002512:	d100      	bne.n	8002516 <memset+0xa>
 8002514:	4770      	bx	lr
 8002516:	f803 1b01 	strb.w	r1, [r3], #1
 800251a:	e7f9      	b.n	8002510 <memset+0x4>

0800251c <strcat>:
 800251c:	4602      	mov	r2, r0
 800251e:	b510      	push	{r4, lr}
 8002520:	7814      	ldrb	r4, [r2, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	3201      	adds	r2, #1
 8002526:	2c00      	cmp	r4, #0
 8002528:	d1fa      	bne.n	8002520 <strcat+0x4>
 800252a:	3b01      	subs	r3, #1
 800252c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002530:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002534:	2a00      	cmp	r2, #0
 8002536:	d1f9      	bne.n	800252c <strcat+0x10>
 8002538:	bd10      	pop	{r4, pc}
	...

0800253c <__libc_init_array>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	2600      	movs	r6, #0
 8002540:	4d0c      	ldr	r5, [pc, #48]	@ (8002574 <__libc_init_array+0x38>)
 8002542:	4c0d      	ldr	r4, [pc, #52]	@ (8002578 <__libc_init_array+0x3c>)
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	42a6      	cmp	r6, r4
 800254a:	d109      	bne.n	8002560 <__libc_init_array+0x24>
 800254c:	f000 f81a 	bl	8002584 <_init>
 8002550:	2600      	movs	r6, #0
 8002552:	4d0a      	ldr	r5, [pc, #40]	@ (800257c <__libc_init_array+0x40>)
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <__libc_init_array+0x44>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	42a6      	cmp	r6, r4
 800255c:	d105      	bne.n	800256a <__libc_init_array+0x2e>
 800255e:	bd70      	pop	{r4, r5, r6, pc}
 8002560:	f855 3b04 	ldr.w	r3, [r5], #4
 8002564:	4798      	blx	r3
 8002566:	3601      	adds	r6, #1
 8002568:	e7ee      	b.n	8002548 <__libc_init_array+0xc>
 800256a:	f855 3b04 	ldr.w	r3, [r5], #4
 800256e:	4798      	blx	r3
 8002570:	3601      	adds	r6, #1
 8002572:	e7f2      	b.n	800255a <__libc_init_array+0x1e>
 8002574:	08002618 	.word	0x08002618
 8002578:	08002618 	.word	0x08002618
 800257c:	08002618 	.word	0x08002618
 8002580:	0800261c 	.word	0x0800261c

08002584 <_init>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

08002590 <_fini>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr
